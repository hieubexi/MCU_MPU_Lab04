
lab4_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ebc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001fc8  08001fc8  00011fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fe8  08001fe8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fe8  08001fe8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fe8  08001fe8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fe8  08001fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fec  08001fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  2000000c  08001ffc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08001ffc  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086dd  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001714  00000000  00000000  00028712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00029e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164b9  00000000  00000000  0002b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e66  00000000  00000000  00041589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ddb  00000000  00000000  0004b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd1ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002750  00000000  00000000  000cd220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fb0 	.word	0x08001fb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001fb0 	.word	0x08001fb0

0800014c <led_Red_test>:
 */


#include "addTask.h"

void led_Red_test(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin) ;
 8000150:	2110      	movs	r1, #16
 8000152:	4802      	ldr	r0, [pc, #8]	; (800015c <led_Red_test+0x10>)
 8000154:	f000 ff1a 	bl	8000f8c <HAL_GPIO_TogglePin>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}
 800015c:	40010800 	.word	0x40010800

08000160 <led_Yellow_test>:
void led_Yellow_test(){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin) ;
 8000164:	2120      	movs	r1, #32
 8000166:	4802      	ldr	r0, [pc, #8]	; (8000170 <led_Yellow_test+0x10>)
 8000168:	f000 ff10 	bl	8000f8c <HAL_GPIO_TogglePin>
}
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}
 8000170:	40010800 	.word	0x40010800

08000174 <led_Green_test>:
void led_Green_test(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin) ;
 8000178:	2140      	movs	r1, #64	; 0x40
 800017a:	4802      	ldr	r0, [pc, #8]	; (8000184 <led_Green_test+0x10>)
 800017c:	f000 ff06 	bl	8000f8c <HAL_GPIO_TogglePin>
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010800 	.word	0x40010800

08000188 <led_Purple_test>:
void led_Purple_test(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_PURPLE_GPIO_Port, LED_PURPLE_Pin) ;
 800018c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000190:	4802      	ldr	r0, [pc, #8]	; (800019c <led_Purple_test+0x14>)
 8000192:	f000 fefb 	bl	8000f8c <HAL_GPIO_TogglePin>
}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010800 	.word	0x40010800

080001a0 <led_Blue_test>:
void led_White_test(){
	HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port,LED_WHITE_Pin) ;
}
void led_Blue_test(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDBLUE_GPIO_Port,LEDBLUE_Pin) ;
 80001a4:	2180      	movs	r1, #128	; 0x80
 80001a6:	4802      	ldr	r0, [pc, #8]	; (80001b0 <led_Blue_test+0x10>)
 80001a8:	f000 fef0 	bl	8000f8c <HAL_GPIO_TogglePin>
}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010800 	.word	0x40010800

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b8:	f000 fbe6 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001bc:	f000 f83a 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f8c0 	bl	8000344 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001c4:	f000 f872 	bl	80002ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001c8:	4814      	ldr	r0, [pc, #80]	; (800021c <main+0x68>)
 80001ca:	f001 fb31 	bl	8001830 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80001ce:	f000 f916 	bl	80003fe <SCH_Init>
  SCH_Add_Task(led_Red_test, 500, 500) ;
 80001d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80001da:	4811      	ldr	r0, [pc, #68]	; (8000220 <main+0x6c>)
 80001dc:	f000 f924 	bl	8000428 <SCH_Add_Task>
  SCH_Add_Task(led_Yellow_test, 1000, 1000) ;
 80001e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001e8:	480e      	ldr	r0, [pc, #56]	; (8000224 <main+0x70>)
 80001ea:	f000 f91d 	bl	8000428 <SCH_Add_Task>
  SCH_Add_Task(led_Blue_test, 5000, 0) ;
 80001ee:	2200      	movs	r2, #0
 80001f0:	f241 3188 	movw	r1, #5000	; 0x1388
 80001f4:	480c      	ldr	r0, [pc, #48]	; (8000228 <main+0x74>)
 80001f6:	f000 f917 	bl	8000428 <SCH_Add_Task>
  SCH_Add_Task(led_Purple_test, 1500, 500 ) ;
 80001fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001fe:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000202:	480a      	ldr	r0, [pc, #40]	; (800022c <main+0x78>)
 8000204:	f000 f910 	bl	8000428 <SCH_Add_Task>
  SCH_Add_Task(led_Green_test, 2000, 500) ;
 8000208:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800020c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000210:	4807      	ldr	r0, [pc, #28]	; (8000230 <main+0x7c>)
 8000212:	f000 f909 	bl	8000428 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000216:	f000 f9d7 	bl	80005c8 <SCH_Dispatch_Tasks>
 800021a:	e7fc      	b.n	8000216 <main+0x62>
 800021c:	2000002c 	.word	0x2000002c
 8000220:	0800014d 	.word	0x0800014d
 8000224:	08000161 	.word	0x08000161
 8000228:	080001a1 	.word	0x080001a1
 800022c:	08000189 	.word	0x08000189
 8000230:	08000175 	.word	0x08000175

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 feac 	bl	8001fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025e:	2310      	movs	r3, #16
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000262:	2300      	movs	r3, #0
 8000264:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	4618      	mov	r0, r3
 800026c:	f000 fea8 	bl	8000fc0 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000276:	f000 f8bd 	bl	80003f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f914 	bl	80014c0 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029e:	f000 f8a9 	bl	80003f4 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	; 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c8:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <MX_TIM2_Init+0x94>)
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_TIM2_Init+0x94>)
 80002d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d8:	4b19      	ldr	r3, [pc, #100]	; (8000340 <MX_TIM2_Init+0x94>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_TIM2_Init+0x94>)
 80002e0:	2209      	movs	r2, #9
 80002e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <MX_TIM2_Init+0x94>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_TIM2_Init+0x94>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002f0:	4813      	ldr	r0, [pc, #76]	; (8000340 <MX_TIM2_Init+0x94>)
 80002f2:	f001 fa4d 	bl	8001790 <HAL_TIM_Base_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002fc:	f000 f87a 	bl	80003f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4619      	mov	r1, r3
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <MX_TIM2_Init+0x94>)
 800030e:	f001 fbe3 	bl	8001ad8 <HAL_TIM_ConfigClockSource>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000318:	f000 f86c 	bl	80003f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4619      	mov	r1, r3
 8000328:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_TIM2_Init+0x94>)
 800032a:	f001 fdab 	bl	8001e84 <HAL_TIMEx_MasterConfigSynchronization>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000334:	f000 f85e 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	3718      	adds	r7, #24
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	2000002c 	.word	0x2000002c

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <MX_GPIO_Init+0x90>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a1d      	ldr	r2, [pc, #116]	; (80003d4 <MX_GPIO_Init+0x90>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <MX_GPIO_Init+0x90>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_GPIO_Init+0x90>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <MX_GPIO_Init+0x90>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_GPIO_Init+0x90>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_WHITE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800038e:	4812      	ldr	r0, [pc, #72]	; (80003d8 <MX_GPIO_Init+0x94>)
 8000390:	f000 fde4 	bl	8000f5c <HAL_GPIO_WritePin>
                          |LEDBLUE_Pin|LED_PURPLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000398:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800039e:	2301      	movs	r3, #1
 80003a0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	4619      	mov	r1, r3
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <MX_GPIO_Init+0x98>)
 80003aa:	f000 fc5d 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_WHITE_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           LEDBLUE_Pin LED_PURPLE_Pin */
  GPIO_InitStruct.Pin = LED_WHITE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 80003ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003b2:	60bb      	str	r3, [r7, #8]
                          |LEDBLUE_Pin|LED_PURPLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2302      	movs	r3, #2
 80003be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	4619      	mov	r1, r3
 80003c6:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_GPIO_Init+0x94>)
 80003c8:	f000 fc4e 	bl	8000c68 <HAL_GPIO_Init>

}
 80003cc:	bf00      	nop
 80003ce:	3718      	adds	r7, #24
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010800 	.word	0x40010800
 80003dc:	40011000 	.word	0x40011000

080003e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
//	timerRun();
//	getKeyInput();
	SCH_Update();
 80003e8:	f000 f880 	bl	80004ec <SCH_Update>

}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fc:	e7fe      	b.n	80003fc <Error_Handler+0x8>

080003fe <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;
uint8_t current_task = 0;

void SCH_Init(void){
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
	unsigned char i;
	for( i = 0; i < SCH_MAX_TASKS; i++){
 8000404:	2300      	movs	r3, #0
 8000406:	71fb      	strb	r3, [r7, #7]
 8000408:	e006      	b.n	8000418 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	4618      	mov	r0, r3
 800040e:	f000 f92b 	bl	8000668 <SCH_Delete_Task>
	for( i = 0; i < SCH_MAX_TASKS; i++){
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	3301      	adds	r3, #1
 8000416:	71fb      	strb	r3, [r7, #7]
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	2b27      	cmp	r3, #39	; 0x27
 800041c:	d9f5      	bls.n	800040a <SCH_Init+0xc>
	}
}
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <SCH_Add_Task>:

void SCH_Add_Task ( void (*pFunction)() ,uint32_t DELAY, uint32_t PERIOD){
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
		if(current_index_task < SCH_MAX_TASKS){
 8000434:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <SCH_Add_Task+0xb8>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b27      	cmp	r3, #39	; 0x27
 800043a:	d84b      	bhi.n	80004d4 <SCH_Add_Task+0xac>

			SCH_tasks_G[current_index_task].pTask = pFunction;
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <SCH_Add_Task+0xb8>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4619      	mov	r1, r3
 8000442:	4a28      	ldr	r2, [pc, #160]	; (80004e4 <SCH_Add_Task+0xbc>)
 8000444:	460b      	mov	r3, r1
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	440b      	add	r3, r1
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4413      	add	r3, r2
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[current_index_task].Delay = DELAY/TIME_CYCLE;
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <SCH_Add_Task+0xb8>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	4618      	mov	r0, r3
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	4a23      	ldr	r2, [pc, #140]	; (80004e8 <SCH_Add_Task+0xc0>)
 800045c:	fba2 2303 	umull	r2, r3, r2, r3
 8000460:	08da      	lsrs	r2, r3, #3
 8000462:	4920      	ldr	r1, [pc, #128]	; (80004e4 <SCH_Add_Task+0xbc>)
 8000464:	4603      	mov	r3, r0
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4403      	add	r3, r0
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	440b      	add	r3, r1
 800046e:	3304      	adds	r3, #4
 8000470:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[current_index_task].Period =  PERIOD/TIME_CYCLE;
 8000472:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <SCH_Add_Task+0xb8>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a1b      	ldr	r2, [pc, #108]	; (80004e8 <SCH_Add_Task+0xc0>)
 800047c:	fba2 2303 	umull	r2, r3, r2, r3
 8000480:	08da      	lsrs	r2, r3, #3
 8000482:	4918      	ldr	r1, [pc, #96]	; (80004e4 <SCH_Add_Task+0xbc>)
 8000484:	4603      	mov	r3, r0
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4403      	add	r3, r0
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	440b      	add	r3, r1
 800048e:	3308      	adds	r3, #8
 8000490:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[current_index_task].RunMe = 0;
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <SCH_Add_Task+0xb8>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	4619      	mov	r1, r3
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <SCH_Add_Task+0xbc>)
 800049a:	460b      	mov	r3, r1
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	440b      	add	r3, r1
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	4413      	add	r3, r2
 80004a4:	330c      	adds	r3, #12
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]

			SCH_tasks_G[current_index_task].TaskID = current_index_task;
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <SCH_Add_Task+0xb8>)
 80004ac:	781a      	ldrb	r2, [r3, #0]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <SCH_Add_Task+0xb8>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	4619      	mov	r1, r3
 80004b4:	4610      	mov	r0, r2
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <SCH_Add_Task+0xbc>)
 80004b8:	460b      	mov	r3, r1
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	440b      	add	r3, r1
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	4413      	add	r3, r2
 80004c2:	3310      	adds	r3, #16
 80004c4:	6018      	str	r0, [r3, #0]

			current_index_task++;
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <SCH_Add_Task+0xb8>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <SCH_Add_Task+0xb8>)
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	e000      	b.n	80004d6 <SCH_Add_Task+0xae>
		}else return ;
 80004d4:	bf00      	nop
}
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000028 	.word	0x20000028
 80004e4:	20000074 	.word	0x20000074
 80004e8:	cccccccd 	.word	0xcccccccd

080004ec <SCH_Update>:

void SCH_Update(void){
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	//	if(SCH_tasks_G[current_task].pTask){
	for(current_task = 0; current_task < current_index_task; current_task++){
 80004f0:	4b32      	ldr	r3, [pc, #200]	; (80005bc <SCH_Update+0xd0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	e056      	b.n	80005a6 <SCH_Update+0xba>
		if(SCH_tasks_G[current_task].Delay > 0){
 80004f8:	4b30      	ldr	r3, [pc, #192]	; (80005bc <SCH_Update+0xd0>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4a30      	ldr	r2, [pc, #192]	; (80005c0 <SCH_Update+0xd4>)
 8000500:	460b      	mov	r3, r1
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	440b      	add	r3, r1
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4413      	add	r3, r2
 800050a:	3304      	adds	r3, #4
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d014      	beq.n	800053c <SCH_Update+0x50>
			SCH_tasks_G[current_task].Delay-- ;
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <SCH_Update+0xd0>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	4929      	ldr	r1, [pc, #164]	; (80005c0 <SCH_Update+0xd4>)
 800051a:	4613      	mov	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	4413      	add	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	440b      	add	r3, r1
 8000524:	3304      	adds	r3, #4
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	1e59      	subs	r1, r3, #1
 800052a:	4825      	ldr	r0, [pc, #148]	; (80005c0 <SCH_Update+0xd4>)
 800052c:	4613      	mov	r3, r2
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4403      	add	r3, r0
 8000536:	3304      	adds	r3, #4
 8000538:	6019      	str	r1, [r3, #0]
 800053a:	e02e      	b.n	800059a <SCH_Update+0xae>
		}else{
			SCH_tasks_G[current_task].Delay = SCH_tasks_G[current_task].Period;
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <SCH_Update+0xd0>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <SCH_Update+0xd0>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <SCH_Update+0xd4>)
 800054a:	460b      	mov	r3, r1
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	440b      	add	r3, r1
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	3308      	adds	r3, #8
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4919      	ldr	r1, [pc, #100]	; (80005c0 <SCH_Update+0xd4>)
 800055a:	4603      	mov	r3, r0
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4403      	add	r3, r0
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	440b      	add	r3, r1
 8000564:	3304      	adds	r3, #4
 8000566:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[current_task].RunMe += 1 ;
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <SCH_Update+0xd0>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <SCH_Update+0xd4>)
 8000570:	460b      	mov	r3, r1
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	440b      	add	r3, r1
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	4413      	add	r3, r2
 800057a:	330c      	adds	r3, #12
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <SCH_Update+0xd0>)
 8000580:	7812      	ldrb	r2, [r2, #0]
 8000582:	4611      	mov	r1, r2
 8000584:	3301      	adds	r3, #1
 8000586:	b2d8      	uxtb	r0, r3
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <SCH_Update+0xd4>)
 800058a:	460b      	mov	r3, r1
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	440b      	add	r3, r1
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4413      	add	r3, r2
 8000594:	330c      	adds	r3, #12
 8000596:	4602      	mov	r2, r0
 8000598:	701a      	strb	r2, [r3, #0]
	for(current_task = 0; current_task < current_index_task; current_task++){
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <SCH_Update+0xd0>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <SCH_Update+0xd0>)
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <SCH_Update+0xd0>)
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <SCH_Update+0xd8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3a2      	bcc.n	80004f8 <SCH_Update+0xc>
		//	}
	}
//	current_task++;
//	if(current_task >= current_index_task) current_task = 0 ;

}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	20000029 	.word	0x20000029
 80005c0:	20000074 	.word	0x20000074
 80005c4:	20000028 	.word	0x20000028

080005c8 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	e03a      	b.n	800064a <SCH_Dispatch_Tasks+0x82>
		if(SCH_tasks_G[i].RunMe > 0){
 80005d4:	4922      	ldr	r1, [pc, #136]	; (8000660 <SCH_Dispatch_Tasks+0x98>)
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	330c      	adds	r3, #12
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d02c      	beq.n	8000644 <SCH_Dispatch_Tasks+0x7c>
			SCH_tasks_G[i].RunMe--;
 80005ea:	491d      	ldr	r1, [pc, #116]	; (8000660 <SCH_Dispatch_Tasks+0x98>)
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	4613      	mov	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	440b      	add	r3, r1
 80005f8:	330c      	adds	r3, #12
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	b2d8      	uxtb	r0, r3
 8000600:	4917      	ldr	r1, [pc, #92]	; (8000660 <SCH_Dispatch_Tasks+0x98>)
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	440b      	add	r3, r1
 800060e:	330c      	adds	r3, #12
 8000610:	4602      	mov	r2, r0
 8000612:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8000614:	4912      	ldr	r1, [pc, #72]	; (8000660 <SCH_Dispatch_Tasks+0x98>)
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	440b      	add	r3, r1
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4798      	blx	r3
			if(SCH_tasks_G[i].Period <= 0) SCH_Delete_Task(i) ;
 8000626:	490e      	ldr	r1, [pc, #56]	; (8000660 <SCH_Dispatch_Tasks+0x98>)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4613      	mov	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	440b      	add	r3, r1
 8000634:	3308      	adds	r3, #8
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d103      	bne.n	8000644 <SCH_Dispatch_Tasks+0x7c>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f812 	bl	8000668 <SCH_Delete_Task>
	for(int i = 0; i < current_index_task; i++){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <SCH_Dispatch_Tasks+0x9c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4293      	cmp	r3, r2
 8000654:	dbbe      	blt.n	80005d4 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000074 	.word	0x20000074
 8000664:	20000028 	.word	0x20000028

08000668 <SCH_Delete_Task>:
void SCH_Delete_Task(const uint32_t TASK_INDEX){
 8000668:	b4b0      	push	{r4, r5, r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	if(current_index_task <= 0 ) return ;
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <SCH_Delete_Task+0x1b0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	f000 80c8 	beq.w	800080a <SCH_Delete_Task+0x1a2>
	if(SCH_tasks_G[TASK_INDEX].pTask == 0x0000) return ;
 800067a:	4968      	ldr	r1, [pc, #416]	; (800081c <SCH_Delete_Task+0x1b4>)
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	440b      	add	r3, r1
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	f000 80bf 	beq.w	800080e <SCH_Delete_Task+0x1a6>
	if(TASK_INDEX == current_index_task - 1){
 8000690:	4b61      	ldr	r3, [pc, #388]	; (8000818 <SCH_Delete_Task+0x1b0>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	1e5a      	subs	r2, r3, #1
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d134      	bne.n	8000706 <SCH_Delete_Task+0x9e>
		SCH_tasks_G[current_index_task - 1].pTask = 0x0000;
 800069c:	4b5e      	ldr	r3, [pc, #376]	; (8000818 <SCH_Delete_Task+0x1b0>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	495e      	ldr	r1, [pc, #376]	; (800081c <SCH_Delete_Task+0x1b4>)
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	440b      	add	r3, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task - 1].Delay = 0 ;
 80006b2:	4b59      	ldr	r3, [pc, #356]	; (8000818 <SCH_Delete_Task+0x1b0>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	1e5a      	subs	r2, r3, #1
 80006b8:	4958      	ldr	r1, [pc, #352]	; (800081c <SCH_Delete_Task+0x1b4>)
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	440b      	add	r3, r1
 80006c4:	3304      	adds	r3, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task - 1].Period = 0 ;
 80006ca:	4b53      	ldr	r3, [pc, #332]	; (8000818 <SCH_Delete_Task+0x1b0>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	4952      	ldr	r1, [pc, #328]	; (800081c <SCH_Delete_Task+0x1b4>)
 80006d2:	4613      	mov	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	440b      	add	r3, r1
 80006dc:	3308      	adds	r3, #8
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task - 1].RunMe = 0;
 80006e2:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <SCH_Delete_Task+0x1b0>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	494c      	ldr	r1, [pc, #304]	; (800081c <SCH_Delete_Task+0x1b4>)
 80006ea:	4613      	mov	r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	330c      	adds	r3, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
		current_index_task--;
 80006fa:	4b47      	ldr	r3, [pc, #284]	; (8000818 <SCH_Delete_Task+0x1b0>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b45      	ldr	r3, [pc, #276]	; (8000818 <SCH_Delete_Task+0x1b0>)
 8000704:	701a      	strb	r2, [r3, #0]
	}
	if(TASK_INDEX == 0){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d127      	bne.n	800075c <SCH_Delete_Task+0xf4>
		for(int  i = 1 ; i < current_index_task; i++){
 800070c:	2301      	movs	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	e017      	b.n	8000742 <SCH_Delete_Task+0xda>
			SCH_tasks_G[i] = SCH_tasks_G[i+1] ;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	4841      	ldr	r0, [pc, #260]	; (800081c <SCH_Delete_Task+0x1b4>)
 8000718:	68f9      	ldr	r1, [r7, #12]
 800071a:	460b      	mov	r3, r1
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	440b      	add	r3, r1
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4418      	add	r0, r3
 8000724:	493d      	ldr	r1, [pc, #244]	; (800081c <SCH_Delete_Task+0x1b4>)
 8000726:	4613      	mov	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	440b      	add	r3, r1
 8000730:	4604      	mov	r4, r0
 8000732:	461d      	mov	r5, r3
 8000734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	682b      	ldr	r3, [r5, #0]
 800073a:	6023      	str	r3, [r4, #0]
		for(int  i = 1 ; i < current_index_task; i++){
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b35      	ldr	r3, [pc, #212]	; (8000818 <SCH_Delete_Task+0x1b0>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4293      	cmp	r3, r2
 800074c:	dbe1      	blt.n	8000712 <SCH_Delete_Task+0xaa>
		}
		current_index_task--;
 800074e:	4b32      	ldr	r3, [pc, #200]	; (8000818 <SCH_Delete_Task+0x1b0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b30      	ldr	r3, [pc, #192]	; (8000818 <SCH_Delete_Task+0x1b0>)
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	e026      	b.n	80007aa <SCH_Delete_Task+0x142>
	}else{
		for( int i = TASK_INDEX ; i < current_index_task ; i++){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	e017      	b.n	8000792 <SCH_Delete_Task+0x12a>
			SCH_tasks_G[i] = SCH_tasks_G[i+1] ;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	482d      	ldr	r0, [pc, #180]	; (800081c <SCH_Delete_Task+0x1b4>)
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	460b      	mov	r3, r1
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	440b      	add	r3, r1
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4418      	add	r0, r3
 8000774:	4929      	ldr	r1, [pc, #164]	; (800081c <SCH_Delete_Task+0x1b4>)
 8000776:	4613      	mov	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4413      	add	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	440b      	add	r3, r1
 8000780:	4604      	mov	r4, r0
 8000782:	461d      	mov	r5, r3
 8000784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000788:	682b      	ldr	r3, [r5, #0]
 800078a:	6023      	str	r3, [r4, #0]
		for( int i = TASK_INDEX ; i < current_index_task ; i++){
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	3301      	adds	r3, #1
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <SCH_Delete_Task+0x1b0>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4293      	cmp	r3, r2
 800079c:	dbe1      	blt.n	8000762 <SCH_Delete_Task+0xfa>
		}
		current_index_task--;
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <SCH_Delete_Task+0x1b0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <SCH_Delete_Task+0x1b0>)
 80007a8:	701a      	strb	r2, [r3, #0]
	}
	SCH_tasks_G[current_index_task].pTask = 0x0000;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <SCH_Delete_Task+0x1b0>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4619      	mov	r1, r3
 80007b0:	4a1a      	ldr	r2, [pc, #104]	; (800081c <SCH_Delete_Task+0x1b4>)
 80007b2:	460b      	mov	r3, r1
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	440b      	add	r3, r1
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Delay = 0 ;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <SCH_Delete_Task+0x1b0>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <SCH_Delete_Task+0x1b4>)
 80007c8:	460b      	mov	r3, r1
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	440b      	add	r3, r1
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	3304      	adds	r3, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Period = 0 ;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <SCH_Delete_Task+0x1b0>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <SCH_Delete_Task+0x1b4>)
 80007e0:	460b      	mov	r3, r1
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	440b      	add	r3, r1
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	3308      	adds	r3, #8
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].RunMe = 0;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <SCH_Delete_Task+0x1b0>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	4a09      	ldr	r2, [pc, #36]	; (800081c <SCH_Delete_Task+0x1b4>)
 80007f8:	460b      	mov	r3, r1
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	330c      	adds	r3, #12
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e002      	b.n	8000810 <SCH_Delete_Task+0x1a8>
	if(current_index_task <= 0 ) return ;
 800080a:	bf00      	nop
 800080c:	e000      	b.n	8000810 <SCH_Delete_Task+0x1a8>
	if(SCH_tasks_G[TASK_INDEX].pTask == 0x0000) return ;
 800080e:	bf00      	nop
}
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bcb0      	pop	{r4, r5, r7}
 8000816:	4770      	bx	lr
 8000818:	20000028 	.word	0x20000028
 800081c:	20000074 	.word	0x20000074

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_MspInit+0x5c>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <HAL_MspInit+0x5c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_MspInit+0x5c>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x5c>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_MspInit+0x5c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_MspInit+0x5c>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_MspInit+0x60>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_MspInit+0x60>)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	40021000 	.word	0x40021000
 8000880:	40010000 	.word	0x40010000

08000884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000894:	d113      	bne.n	80008be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_TIM_Base_MspInit+0x44>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <HAL_TIM_Base_MspInit+0x44>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	61d3      	str	r3, [r2, #28]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_TIM_Base_MspInit+0x44>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	201c      	movs	r0, #28
 80008b4:	f000 f9a1 	bl	8000bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008b8:	201c      	movs	r0, #28
 80008ba:	f000 f9ba 	bl	8000c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000912:	f000 f87f 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <TIM2_IRQHandler+0x10>)
 8000922:	f000 ffd1 	bl	80018c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000002c 	.word	0x2000002c

08000930 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	; (8000974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	; (8000980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000962:	f7ff ffe5 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000966:	f001 faf7 	bl	8001f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fc23 	bl	80001b4 <main>
  bx lr
 800096e:	4770      	bx	lr
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000978:	08001ff0 	.word	0x08001ff0
  ldr r2, =_sbss
 800097c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000980:	20000398 	.word	0x20000398

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x28>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f923 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff ff3c 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f93b 	bl	8000c4e <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f903 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x1c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_IncTick+0x20>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <HAL_IncTick+0x20>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000394 	.word	0x20000394

08000a38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <HAL_GetTick+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	20000394 	.word	0x20000394

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4906      	ldr	r1, [pc, #24]	; (8000ae4 <__NVIC_EnableIRQ+0x34>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff90 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff2d 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff42 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff90 	bl	8000b3c <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5f 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff35 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffa2 	bl	8000ba0 <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b08b      	sub	sp, #44	; 0x2c
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7a:	e148      	b.n	8000f0e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8137 	bne.w	8000f08 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4aa3      	ldr	r2, [pc, #652]	; (8000f2c <HAL_GPIO_Init+0x2c4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d05e      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000ca4:	4aa1      	ldr	r2, [pc, #644]	; (8000f2c <HAL_GPIO_Init+0x2c4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d875      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000caa:	4aa1      	ldr	r2, [pc, #644]	; (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d058      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cb0:	4a9f      	ldr	r2, [pc, #636]	; (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d86f      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cb6:	4a9f      	ldr	r2, [pc, #636]	; (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d052      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cbc:	4a9d      	ldr	r2, [pc, #628]	; (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d869      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cc2:	4a9d      	ldr	r2, [pc, #628]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d04c      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cc8:	4a9b      	ldr	r2, [pc, #620]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d863      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cce:	4a9b      	ldr	r2, [pc, #620]	; (8000f3c <HAL_GPIO_Init+0x2d4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d046      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cd4:	4a99      	ldr	r2, [pc, #612]	; (8000f3c <HAL_GPIO_Init+0x2d4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d85d      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	d82a      	bhi.n	8000d34 <HAL_GPIO_Init+0xcc>
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d859      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000ce2:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <HAL_GPIO_Init+0x80>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d3d 	.word	0x08000d3d
 8000cf0:	08000d4f 	.word	0x08000d4f
 8000cf4:	08000d91 	.word	0x08000d91
 8000cf8:	08000d97 	.word	0x08000d97
 8000cfc:	08000d97 	.word	0x08000d97
 8000d00:	08000d97 	.word	0x08000d97
 8000d04:	08000d97 	.word	0x08000d97
 8000d08:	08000d97 	.word	0x08000d97
 8000d0c:	08000d97 	.word	0x08000d97
 8000d10:	08000d97 	.word	0x08000d97
 8000d14:	08000d97 	.word	0x08000d97
 8000d18:	08000d97 	.word	0x08000d97
 8000d1c:	08000d97 	.word	0x08000d97
 8000d20:	08000d97 	.word	0x08000d97
 8000d24:	08000d97 	.word	0x08000d97
 8000d28:	08000d97 	.word	0x08000d97
 8000d2c:	08000d45 	.word	0x08000d45
 8000d30:	08000d59 	.word	0x08000d59
 8000d34:	4a82      	ldr	r2, [pc, #520]	; (8000f40 <HAL_GPIO_Init+0x2d8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d3a:	e02c      	b.n	8000d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	623b      	str	r3, [r7, #32]
          break;
 8000d42:	e029      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e024      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	3308      	adds	r3, #8
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e01f      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	330c      	adds	r3, #12
 8000d5e:	623b      	str	r3, [r7, #32]
          break;
 8000d60:	e01a      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e013      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d105      	bne.n	8000d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	611a      	str	r2, [r3, #16]
          break;
 8000d82:	e009      	b.n	8000d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d84:	2308      	movs	r3, #8
 8000d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	615a      	str	r2, [r3, #20]
          break;
 8000d8e:	e003      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
          break;
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          break;
 8000d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2bff      	cmp	r3, #255	; 0xff
 8000d9c:	d801      	bhi.n	8000da2 <HAL_GPIO_Init+0x13a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	e001      	b.n	8000da6 <HAL_GPIO_Init+0x13e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3304      	adds	r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	2bff      	cmp	r3, #255	; 0xff
 8000dac:	d802      	bhi.n	8000db4 <HAL_GPIO_Init+0x14c>
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x152>
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	3b08      	subs	r3, #8
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	6a39      	ldr	r1, [r7, #32]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8090 	beq.w	8000f08 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000de8:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a55      	ldr	r2, [pc, #340]	; (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e00:	4a51      	ldr	r2, [pc, #324]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a49      	ldr	r2, [pc, #292]	; (8000f4c <HAL_GPIO_Init+0x2e4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d00d      	beq.n	8000e48 <HAL_GPIO_Init+0x1e0>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a48      	ldr	r2, [pc, #288]	; (8000f50 <HAL_GPIO_Init+0x2e8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d007      	beq.n	8000e44 <HAL_GPIO_Init+0x1dc>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a47      	ldr	r2, [pc, #284]	; (8000f54 <HAL_GPIO_Init+0x2ec>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d101      	bne.n	8000e40 <HAL_GPIO_Init+0x1d8>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e004      	b.n	8000e4a <HAL_GPIO_Init+0x1e2>
 8000e40:	2303      	movs	r3, #3
 8000e42:	e002      	b.n	8000e4a <HAL_GPIO_Init+0x1e2>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <HAL_GPIO_Init+0x1e2>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e4c:	f002 0203 	and.w	r2, r2, #3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4093      	lsls	r3, r2
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e5a:	493b      	ldr	r1, [pc, #236]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e74:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4937      	ldr	r1, [pc, #220]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e82:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	4933      	ldr	r1, [pc, #204]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e9c:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	492d      	ldr	r1, [pc, #180]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	4929      	ldr	r1, [pc, #164]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	4923      	ldr	r1, [pc, #140]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	608b      	str	r3, [r1, #8]
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	491f      	ldr	r1, [pc, #124]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	4919      	ldr	r1, [pc, #100]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	60cb      	str	r3, [r1, #12]
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	4915      	ldr	r1, [pc, #84]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f47f aeaf 	bne.w	8000c7c <HAL_GPIO_Init+0x14>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	372c      	adds	r7, #44	; 0x2c
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	10320000 	.word	0x10320000
 8000f30:	10310000 	.word	0x10310000
 8000f34:	10220000 	.word	0x10220000
 8000f38:	10210000 	.word	0x10210000
 8000f3c:	10120000 	.word	0x10120000
 8000f40:	10110000 	.word	0x10110000
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	40011000 	.word	0x40011000
 8000f58:	40010400 	.word	0x40010400

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f78:	e003      	b.n	8000f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	611a      	str	r2, [r3, #16]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	041a      	lsls	r2, r3, #16
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43d9      	mvns	r1, r3
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	400b      	ands	r3, r1
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	611a      	str	r2, [r3, #16]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e26c      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8087 	beq.w	80010ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe0:	4b92      	ldr	r3, [pc, #584]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d00c      	beq.n	8001006 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fec:	4b8f      	ldr	r3, [pc, #572]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d112      	bne.n	800101e <HAL_RCC_OscConfig+0x5e>
 8000ff8:	4b8c      	ldr	r3, [pc, #560]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001004:	d10b      	bne.n	800101e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001006:	4b89      	ldr	r3, [pc, #548]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d06c      	beq.n	80010ec <HAL_RCC_OscConfig+0x12c>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d168      	bne.n	80010ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e246      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001026:	d106      	bne.n	8001036 <HAL_RCC_OscConfig+0x76>
 8001028:	4b80      	ldr	r3, [pc, #512]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a7f      	ldr	r2, [pc, #508]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 800102e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	e02e      	b.n	8001094 <HAL_RCC_OscConfig+0xd4>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0x98>
 800103e:	4b7b      	ldr	r3, [pc, #492]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a7a      	ldr	r2, [pc, #488]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b78      	ldr	r3, [pc, #480]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a77      	ldr	r2, [pc, #476]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e01d      	b.n	8001094 <HAL_RCC_OscConfig+0xd4>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0xbc>
 8001062:	4b72      	ldr	r3, [pc, #456]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a71      	ldr	r2, [pc, #452]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	4b6f      	ldr	r3, [pc, #444]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a6e      	ldr	r2, [pc, #440]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e00b      	b.n	8001094 <HAL_RCC_OscConfig+0xd4>
 800107c:	4b6b      	ldr	r3, [pc, #428]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a6a      	ldr	r2, [pc, #424]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b68      	ldr	r3, [pc, #416]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a67      	ldr	r2, [pc, #412]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 800108e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001092:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d013      	beq.n	80010c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fccc 	bl	8000a38 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fcc8 	bl	8000a38 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	; 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e1fa      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	4b5d      	ldr	r3, [pc, #372]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0xe4>
 80010c2:	e014      	b.n	80010ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fcb8 	bl	8000a38 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fcb4 	bl	8000a38 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	; 0x64
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e1e6      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	4b53      	ldr	r3, [pc, #332]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x10c>
 80010ea:	e000      	b.n	80010ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d063      	beq.n	80011c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010fa:	4b4c      	ldr	r3, [pc, #304]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00b      	beq.n	800111e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001106:	4b49      	ldr	r3, [pc, #292]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b08      	cmp	r3, #8
 8001110:	d11c      	bne.n	800114c <HAL_RCC_OscConfig+0x18c>
 8001112:	4b46      	ldr	r3, [pc, #280]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d116      	bne.n	800114c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <HAL_RCC_OscConfig+0x176>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e1ba      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4939      	ldr	r1, [pc, #228]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	e03a      	b.n	80011c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d020      	beq.n	8001196 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001154:	4b36      	ldr	r3, [pc, #216]	; (8001230 <HAL_RCC_OscConfig+0x270>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fc6d 	bl	8000a38 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001162:	f7ff fc69 	bl	8000a38 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e19b      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4927      	ldr	r1, [pc, #156]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 8001190:	4313      	orrs	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
 8001194:	e015      	b.n	80011c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <HAL_RCC_OscConfig+0x270>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fc4c 	bl	8000a38 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a4:	f7ff fc48 	bl	8000a38 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e17a      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d03a      	beq.n	8001244 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d019      	beq.n	800120a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_RCC_OscConfig+0x274>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011dc:	f7ff fc2c 	bl	8000a38 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e4:	f7ff fc28 	bl	8000a38 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e15a      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001202:	2001      	movs	r0, #1
 8001204:	f000 faa6 	bl	8001754 <RCC_Delay>
 8001208:	e01c      	b.n	8001244 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_RCC_OscConfig+0x274>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001210:	f7ff fc12 	bl	8000a38 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001216:	e00f      	b.n	8001238 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001218:	f7ff fc0e 	bl	8000a38 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d908      	bls.n	8001238 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e140      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	42420000 	.word	0x42420000
 8001234:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001238:	4b9e      	ldr	r3, [pc, #632]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1e9      	bne.n	8001218 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a6 	beq.w	800139e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001256:	4b97      	ldr	r3, [pc, #604]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10d      	bne.n	800127e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b94      	ldr	r3, [pc, #592]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a93      	ldr	r2, [pc, #588]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b91      	ldr	r3, [pc, #580]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127a:	2301      	movs	r3, #1
 800127c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127e:	4b8e      	ldr	r3, [pc, #568]	; (80014b8 <HAL_RCC_OscConfig+0x4f8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001286:	2b00      	cmp	r3, #0
 8001288:	d118      	bne.n	80012bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128a:	4b8b      	ldr	r3, [pc, #556]	; (80014b8 <HAL_RCC_OscConfig+0x4f8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a8a      	ldr	r2, [pc, #552]	; (80014b8 <HAL_RCC_OscConfig+0x4f8>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001296:	f7ff fbcf 	bl	8000a38 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129e:	f7ff fbcb 	bl	8000a38 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b64      	cmp	r3, #100	; 0x64
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e0fd      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b0:	4b81      	ldr	r3, [pc, #516]	; (80014b8 <HAL_RCC_OscConfig+0x4f8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d106      	bne.n	80012d2 <HAL_RCC_OscConfig+0x312>
 80012c4:	4b7b      	ldr	r3, [pc, #492]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4a7a      	ldr	r2, [pc, #488]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6213      	str	r3, [r2, #32]
 80012d0:	e02d      	b.n	800132e <HAL_RCC_OscConfig+0x36e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x334>
 80012da:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4a75      	ldr	r2, [pc, #468]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	6213      	str	r3, [r2, #32]
 80012e6:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4a72      	ldr	r2, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	f023 0304 	bic.w	r3, r3, #4
 80012f0:	6213      	str	r3, [r2, #32]
 80012f2:	e01c      	b.n	800132e <HAL_RCC_OscConfig+0x36e>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b05      	cmp	r3, #5
 80012fa:	d10c      	bne.n	8001316 <HAL_RCC_OscConfig+0x356>
 80012fc:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4a6c      	ldr	r2, [pc, #432]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6213      	str	r3, [r2, #32]
 8001308:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6213      	str	r3, [r2, #32]
 8001314:	e00b      	b.n	800132e <HAL_RCC_OscConfig+0x36e>
 8001316:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4a66      	ldr	r2, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	6213      	str	r3, [r2, #32]
 8001322:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4a63      	ldr	r2, [pc, #396]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	f023 0304 	bic.w	r3, r3, #4
 800132c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d015      	beq.n	8001362 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fb7f 	bl	8000a38 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133c:	e00a      	b.n	8001354 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133e:	f7ff fb7b 	bl	8000a38 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	f241 3288 	movw	r2, #5000	; 0x1388
 800134c:	4293      	cmp	r3, r2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0ab      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001354:	4b57      	ldr	r3, [pc, #348]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0ee      	beq.n	800133e <HAL_RCC_OscConfig+0x37e>
 8001360:	e014      	b.n	800138c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001362:	f7ff fb69 	bl	8000a38 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001368:	e00a      	b.n	8001380 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7ff fb65 	bl	8000a38 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f241 3288 	movw	r2, #5000	; 0x1388
 8001378:	4293      	cmp	r3, r2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e095      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001380:	4b4c      	ldr	r3, [pc, #304]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1ee      	bne.n	800136a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d105      	bne.n	800139e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001392:	4b48      	ldr	r3, [pc, #288]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a47      	ldr	r2, [pc, #284]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8081 	beq.w	80014aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a8:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d061      	beq.n	8001478 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d146      	bne.n	800144a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013bc:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <HAL_RCC_OscConfig+0x4fc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fb39 	bl	8000a38 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ca:	f7ff fb35 	bl	8000a38 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e067      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f0:	d108      	bne.n	8001404 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013f2:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	492d      	ldr	r1, [pc, #180]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a19      	ldr	r1, [r3, #32]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	430b      	orrs	r3, r1
 8001416:	4927      	ldr	r1, [pc, #156]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <HAL_RCC_OscConfig+0x4fc>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fb09 	bl	8000a38 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff fb05 	bl	8000a38 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e037      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x46a>
 8001448:	e02f      	b.n	80014aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <HAL_RCC_OscConfig+0x4fc>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff faf2 	bl	8000a38 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff faee 	bl	8000a38 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e020      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x498>
 8001476:	e018      	b.n	80014aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e013      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_RCC_OscConfig+0x4f4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	429a      	cmp	r2, r3
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40007000 	.word	0x40007000
 80014bc:	42420060 	.word	0x42420060

080014c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0d0      	b.n	8001676 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014d4:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <HAL_RCC_ClockConfig+0x1c0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d910      	bls.n	8001504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	4b67      	ldr	r3, [pc, #412]	; (8001680 <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 0207 	bic.w	r2, r3, #7
 80014ea:	4965      	ldr	r1, [pc, #404]	; (8001680 <HAL_RCC_ClockConfig+0x1c0>)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f2:	4b63      	ldr	r3, [pc, #396]	; (8001680 <HAL_RCC_ClockConfig+0x1c0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d001      	beq.n	8001504 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0b8      	b.n	8001676 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151c:	4b59      	ldr	r3, [pc, #356]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4a58      	ldr	r2, [pc, #352]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001526:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001534:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a52      	ldr	r2, [pc, #328]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800153e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b50      	ldr	r3, [pc, #320]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	494d      	ldr	r1, [pc, #308]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	4313      	orrs	r3, r2
 8001550:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d040      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d115      	bne.n	800159e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e07f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e073      	b.n	8001676 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06b      	b.n	8001676 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800159e:	4b39      	ldr	r3, [pc, #228]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f023 0203 	bic.w	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4936      	ldr	r1, [pc, #216]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b0:	f7ff fa42 	bl	8000a38 <HAL_GetTick>
 80015b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b8:	f7ff fa3e 	bl	8000a38 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e053      	b.n	8001676 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 020c 	and.w	r2, r3, #12
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	429a      	cmp	r2, r3
 80015de:	d1eb      	bne.n	80015b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <HAL_RCC_ClockConfig+0x1c0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d210      	bcs.n	8001610 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 0207 	bic.w	r2, r3, #7
 80015f6:	4922      	ldr	r1, [pc, #136]	; (8001680 <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e032      	b.n	8001676 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4916      	ldr	r1, [pc, #88]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	490e      	ldr	r1, [pc, #56]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800164e:	f000 f821 	bl	8001694 <HAL_RCC_GetSysClockFreq>
 8001652:	4602      	mov	r2, r0
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	490a      	ldr	r1, [pc, #40]	; (8001688 <HAL_RCC_ClockConfig+0x1c8>)
 8001660:	5ccb      	ldrb	r3, [r1, r3]
 8001662:	fa22 f303 	lsr.w	r3, r2, r3
 8001666:	4a09      	ldr	r2, [pc, #36]	; (800168c <HAL_RCC_ClockConfig+0x1cc>)
 8001668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_RCC_ClockConfig+0x1d0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f9a0 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40022000 	.word	0x40022000
 8001684:	40021000 	.word	0x40021000
 8001688:	08001fd8 	.word	0x08001fd8
 800168c:	20000000 	.word	0x20000000
 8001690:	20000004 	.word	0x20000004

08001694 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001694:	b490      	push	{r4, r7}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <HAL_RCC_GetSysClockFreq+0xb0>)
 800169c:	1d3c      	adds	r4, r7, #4
 800169e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016a4:	f240 2301 	movw	r3, #513	; 0x201
 80016a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d002      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x40>
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d003      	beq.n	80016da <HAL_RCC_GetSysClockFreq+0x46>
 80016d2:	e02d      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d6:	623b      	str	r3, [r7, #32]
      break;
 80016d8:	e02d      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	0c9b      	lsrs	r3, r3, #18
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016e6:	4413      	add	r3, r2
 80016e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	0c5b      	lsrs	r3, r3, #17
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001706:	4413      	add	r3, r2
 8001708:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800170c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001712:	fb02 f203 	mul.w	r2, r2, r3
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	fbb2 f3f3 	udiv	r3, r2, r3
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
 800171e:	e004      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	623b      	str	r3, [r7, #32]
      break;
 800172e:	e002      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001732:	623b      	str	r3, [r7, #32]
      break;
 8001734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001736:	6a3b      	ldr	r3, [r7, #32]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bc90      	pop	{r4, r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	08001fc8 	.word	0x08001fc8
 8001748:	40021000 	.word	0x40021000
 800174c:	007a1200 	.word	0x007a1200
 8001750:	003d0900 	.word	0x003d0900

08001754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <RCC_Delay+0x34>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <RCC_Delay+0x38>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0a5b      	lsrs	r3, r3, #9
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001770:	bf00      	nop
  }
  while (Delay --);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1e5a      	subs	r2, r3, #1
 8001776:	60fa      	str	r2, [r7, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f9      	bne.n	8001770 <RCC_Delay+0x1c>
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	20000000 	.word	0x20000000
 800178c:	10624dd3 	.word	0x10624dd3

08001790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e041      	b.n	8001826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d106      	bne.n	80017bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff f864 	bl	8000884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3304      	adds	r3, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4610      	mov	r0, r2
 80017d0:	f000 fa6a 	bl	8001ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d001      	beq.n	8001848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e035      	b.n	80018b4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <HAL_TIM_Base_Start_IT+0x90>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d009      	beq.n	800187e <HAL_TIM_Base_Start_IT+0x4e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001872:	d004      	beq.n	800187e <HAL_TIM_Base_Start_IT+0x4e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <HAL_TIM_Base_Start_IT+0x94>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d111      	bne.n	80018a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b06      	cmp	r3, #6
 800188e:	d010      	beq.n	80018b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018a0:	e007      	b.n	80018b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40012c00 	.word	0x40012c00
 80018c4:	40000400 	.word	0x40000400

080018c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d122      	bne.n	8001924 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d11b      	bne.n	8001924 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0202 	mvn.w	r2, #2
 80018f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f9b1 	bl	8001c72 <HAL_TIM_IC_CaptureCallback>
 8001910:	e005      	b.n	800191e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f9a4 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f9b3 	bl	8001c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b04      	cmp	r3, #4
 8001930:	d122      	bne.n	8001978 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b04      	cmp	r3, #4
 800193e:	d11b      	bne.n	8001978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f06f 0204 	mvn.w	r2, #4
 8001948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2202      	movs	r2, #2
 800194e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f987 	bl	8001c72 <HAL_TIM_IC_CaptureCallback>
 8001964:	e005      	b.n	8001972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f97a 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f989 	bl	8001c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b08      	cmp	r3, #8
 8001984:	d122      	bne.n	80019cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b08      	cmp	r3, #8
 8001992:	d11b      	bne.n	80019cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f06f 0208 	mvn.w	r2, #8
 800199c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2204      	movs	r2, #4
 80019a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f95d 	bl	8001c72 <HAL_TIM_IC_CaptureCallback>
 80019b8:	e005      	b.n	80019c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f950 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f95f 	bl	8001c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d122      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d11b      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0210 	mvn.w	r2, #16
 80019f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2208      	movs	r2, #8
 80019f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f933 	bl	8001c72 <HAL_TIM_IC_CaptureCallback>
 8001a0c:	e005      	b.n	8001a1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f926 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f935 	bl	8001c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d10e      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d107      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0201 	mvn.w	r2, #1
 8001a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7fe fcca 	bl	80003e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a56:	2b80      	cmp	r3, #128	; 0x80
 8001a58:	d10e      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a64:	2b80      	cmp	r3, #128	; 0x80
 8001a66:	d107      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fa67 	bl	8001f46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a82:	2b40      	cmp	r3, #64	; 0x40
 8001a84:	d10e      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b40      	cmp	r3, #64	; 0x40
 8001a92:	d107      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8f9 	bl	8001c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	2b20      	cmp	r3, #32
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	d107      	bne.n	8001ad0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0220 	mvn.w	r2, #32
 8001ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fa32 	bl	8001f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_TIM_ConfigClockSource+0x18>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e0b3      	b.n	8001c58 <HAL_TIM_ConfigClockSource+0x180>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b28:	d03e      	beq.n	8001ba8 <HAL_TIM_ConfigClockSource+0xd0>
 8001b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b2e:	f200 8087 	bhi.w	8001c40 <HAL_TIM_ConfigClockSource+0x168>
 8001b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b36:	f000 8085 	beq.w	8001c44 <HAL_TIM_ConfigClockSource+0x16c>
 8001b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3e:	d87f      	bhi.n	8001c40 <HAL_TIM_ConfigClockSource+0x168>
 8001b40:	2b70      	cmp	r3, #112	; 0x70
 8001b42:	d01a      	beq.n	8001b7a <HAL_TIM_ConfigClockSource+0xa2>
 8001b44:	2b70      	cmp	r3, #112	; 0x70
 8001b46:	d87b      	bhi.n	8001c40 <HAL_TIM_ConfigClockSource+0x168>
 8001b48:	2b60      	cmp	r3, #96	; 0x60
 8001b4a:	d050      	beq.n	8001bee <HAL_TIM_ConfigClockSource+0x116>
 8001b4c:	2b60      	cmp	r3, #96	; 0x60
 8001b4e:	d877      	bhi.n	8001c40 <HAL_TIM_ConfigClockSource+0x168>
 8001b50:	2b50      	cmp	r3, #80	; 0x50
 8001b52:	d03c      	beq.n	8001bce <HAL_TIM_ConfigClockSource+0xf6>
 8001b54:	2b50      	cmp	r3, #80	; 0x50
 8001b56:	d873      	bhi.n	8001c40 <HAL_TIM_ConfigClockSource+0x168>
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d058      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0x136>
 8001b5c:	2b40      	cmp	r3, #64	; 0x40
 8001b5e:	d86f      	bhi.n	8001c40 <HAL_TIM_ConfigClockSource+0x168>
 8001b60:	2b30      	cmp	r3, #48	; 0x30
 8001b62:	d064      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0x156>
 8001b64:	2b30      	cmp	r3, #48	; 0x30
 8001b66:	d86b      	bhi.n	8001c40 <HAL_TIM_ConfigClockSource+0x168>
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d060      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0x156>
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d867      	bhi.n	8001c40 <HAL_TIM_ConfigClockSource+0x168>
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d05c      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0x156>
 8001b74:	2b10      	cmp	r3, #16
 8001b76:	d05a      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001b78:	e062      	b.n	8001c40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6899      	ldr	r1, [r3, #8]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f000 f95c 	bl	8001e46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	609a      	str	r2, [r3, #8]
      break;
 8001ba6:	e04e      	b.n	8001c46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6899      	ldr	r1, [r3, #8]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f000 f945 	bl	8001e46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bca:	609a      	str	r2, [r3, #8]
      break;
 8001bcc:	e03b      	b.n	8001c46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6859      	ldr	r1, [r3, #4]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f000 f8bc 	bl	8001d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2150      	movs	r1, #80	; 0x50
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f913 	bl	8001e12 <TIM_ITRx_SetConfig>
      break;
 8001bec:	e02b      	b.n	8001c46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6859      	ldr	r1, [r3, #4]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f000 f8da 	bl	8001db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2160      	movs	r1, #96	; 0x60
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f903 	bl	8001e12 <TIM_ITRx_SetConfig>
      break;
 8001c0c:	e01b      	b.n	8001c46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f000 f89c 	bl	8001d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2140      	movs	r1, #64	; 0x40
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f8f3 	bl	8001e12 <TIM_ITRx_SetConfig>
      break;
 8001c2c:	e00b      	b.n	8001c46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f000 f8ea 	bl	8001e12 <TIM_ITRx_SetConfig>
        break;
 8001c3e:	e002      	b.n	8001c46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001c40:	bf00      	nop
 8001c42:	e000      	b.n	8001c46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001c44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a25      	ldr	r2, [pc, #148]	; (8001d50 <TIM_Base_SetConfig+0xa8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <TIM_Base_SetConfig+0x28>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc6:	d003      	beq.n	8001cd0 <TIM_Base_SetConfig+0x28>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <TIM_Base_SetConfig+0xac>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d108      	bne.n	8001ce2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <TIM_Base_SetConfig+0xa8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <TIM_Base_SetConfig+0x52>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf0:	d003      	beq.n	8001cfa <TIM_Base_SetConfig+0x52>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <TIM_Base_SetConfig+0xac>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d108      	bne.n	8001d0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <TIM_Base_SetConfig+0xa8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d103      	bne.n	8001d40 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	615a      	str	r2, [r3, #20]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40000400 	.word	0x40000400

08001d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	f023 0201 	bic.w	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f023 030a 	bic.w	r3, r3, #10
 8001d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	621a      	str	r2, [r3, #32]
}
 8001daa:	bf00      	nop
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f023 0210 	bic.w	r2, r3, #16
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	031b      	lsls	r3, r3, #12
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001df0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	621a      	str	r2, [r3, #32]
}
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f043 0307 	orr.w	r3, r3, #7
 8001e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	609a      	str	r2, [r3, #8]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b087      	sub	sp, #28
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	021a      	lsls	r2, r3, #8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	609a      	str	r2, [r3, #8]
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e041      	b.n	8001f20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d004      	beq.n	8001ef4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d10c      	bne.n	8001f0e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001efa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40000400 	.word	0x40000400

08001f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <__libc_init_array>:
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	2600      	movs	r6, #0
 8001f5c:	4d0c      	ldr	r5, [pc, #48]	; (8001f90 <__libc_init_array+0x38>)
 8001f5e:	4c0d      	ldr	r4, [pc, #52]	; (8001f94 <__libc_init_array+0x3c>)
 8001f60:	1b64      	subs	r4, r4, r5
 8001f62:	10a4      	asrs	r4, r4, #2
 8001f64:	42a6      	cmp	r6, r4
 8001f66:	d109      	bne.n	8001f7c <__libc_init_array+0x24>
 8001f68:	f000 f822 	bl	8001fb0 <_init>
 8001f6c:	2600      	movs	r6, #0
 8001f6e:	4d0a      	ldr	r5, [pc, #40]	; (8001f98 <__libc_init_array+0x40>)
 8001f70:	4c0a      	ldr	r4, [pc, #40]	; (8001f9c <__libc_init_array+0x44>)
 8001f72:	1b64      	subs	r4, r4, r5
 8001f74:	10a4      	asrs	r4, r4, #2
 8001f76:	42a6      	cmp	r6, r4
 8001f78:	d105      	bne.n	8001f86 <__libc_init_array+0x2e>
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
 8001f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f80:	4798      	blx	r3
 8001f82:	3601      	adds	r6, #1
 8001f84:	e7ee      	b.n	8001f64 <__libc_init_array+0xc>
 8001f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f8a:	4798      	blx	r3
 8001f8c:	3601      	adds	r6, #1
 8001f8e:	e7f2      	b.n	8001f76 <__libc_init_array+0x1e>
 8001f90:	08001fe8 	.word	0x08001fe8
 8001f94:	08001fe8 	.word	0x08001fe8
 8001f98:	08001fe8 	.word	0x08001fe8
 8001f9c:	08001fec 	.word	0x08001fec

08001fa0 <memset>:
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4402      	add	r2, r0
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d100      	bne.n	8001faa <memset+0xa>
 8001fa8:	4770      	bx	lr
 8001faa:	f803 1b01 	strb.w	r1, [r3], #1
 8001fae:	e7f9      	b.n	8001fa4 <memset+0x4>

08001fb0 <_init>:
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	bf00      	nop
 8001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb6:	bc08      	pop	{r3}
 8001fb8:	469e      	mov	lr, r3
 8001fba:	4770      	bx	lr

08001fbc <_fini>:
 8001fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbe:	bf00      	nop
 8001fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc2:	bc08      	pop	{r3}
 8001fc4:	469e      	mov	lr, r3
 8001fc6:	4770      	bx	lr
